<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->

  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
	<arg name="world_name" value="$(find my_robot)/worlds/my_world.world"/>

    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <!-- more default parameters can be changed here -->
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find my_robot)/urdf/my_robot2.xacro'" />

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <!-- start robot state publisher -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <node pkg="tf" type="static_transform_publisher" name="odom_to_basefootprint"
        args="0.0 0.0 0.0 0 0 0.0 /odom /base_footprint 40" />

  <!-- Spawn my robot into Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
     args="-param robot_description -urdf -model robot_description" />

  <!-- launch node for converting image_raw into other forms of images used for ROS processing -->


  <node pkg="image_proc" type="image_proc" name="image_proc" ns="my_robot/camera1" />
  <node pkg="my_robot" type="convert_image_encoding_node" name="image_encode_conveter" />

  <!-- TODO Having problems converting with depth_image_proc/point_cloud_xyz -->

 <node pkg="nodelet" type="nodelet" name="standalone_nodelet"  ns="converted" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depth_image_proc" args="load depth_image_proc/point_cloud_xyz standalone_nodelet" output="screen" ns="converted">
  </node>
</launch>
